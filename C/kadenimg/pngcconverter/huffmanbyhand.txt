https://pyokagan.name/blog/2019-10-18-zlibinflate/

This is a test of the zlib compression method.  In the Beginning there was a programmer who hated zlib compression.  After working on it for many weeks, he still hated it.  For the love of all that is holy just work please.  I have rewritten so many functions and read through so many documents.



START hexdump


78 5e 65 8f 51 4e c4 30 
0c 44 af 32 07 40 7b 07 
f8 40 e2 9f 0b 84 c6 6d 
bc 9b d8 95 e3 52 2d a7 
c7 86 15 3f 48 fe b1 66 
fc 66 fc de 78 22 a6 c0 
69 3a 74 85 37 c2 57 e7 
0f 2c 3a 76 a3 39 59 05 
83 bc 69 bd 00 6f f2 63 
78 a1 8d 45 58 b6 dc 8c 
70 96 44 ec a6 9b 95 31 
c8 70 36 45 2b 4e f5 1f 
2b 20 cf ab a7 45 ed 96 
84 c0 b3 63 55 c3 28 72 
c7 49 74 9b 4f 88 90 e9 
dc fb 83 c2 1e 77 af e1 
c9 f4 ae 9f 94 55 4b c8 
1e 7a 3e d0 b4 df 71 3d 
e2 87 e4 62 ef 54 26 65 
e1 00 84 db e8 34 76 27 
c1 d4 df 9c f5 90 c5 a3 
4f 14 97 1a 7a a9 c1 32 
3d b6 f6 67 a9 ba 1c 83 
c4 e7 e5 1b c2 22 69 94 

END hexdump

START bindump


0001 1110	0111 1010	1010 0110	1111 0001	1000 1010	0111 0010	0010 0011	0000 1100	
0011 0000	0010 0010	1111 0101	0100 1100	1110 0000	0000 0010	1101 1110	1110 0000	
0001 1111	0000 0010	0100 0111	1111 1001	1101 0000	0010 0001	0110 0011	1011 0110	
0011 1101	1101 1001	0001 1011	1010 1001	1100 0111	0100 1010	1011 0100	1110 0101	
1110 0011	0110 0001	1010 1000	1111 1100	0001 0010	0111 1111	1000 1101	0110 0110	
0011 1111	0110 0110	0011 1111	0111 1011	0001 1110	0100 0100	0110 0101	0000 0011	
1001 0110	0101 1100	0010 1110	1010 0001	1110 1100	0100 0011	1110 1010	1110 0111	
1111 0000	0011 0100	0101 1100	0110 1110	1100 0101	1001 1100	1001 1010	1010 0000	
1100 0001	0011 1101	1001 0110	1011 1101	0000 0000	1111 0110	0100 1111	1100 0110	
0001 1110	1000 0101	1011 0001	1010 0010	0001 1010	0110 1101	0011 1011	0011 0001	
0000 1110	0110 1001	0010 0010	0011 0111	0110 0101	1101 1001	1010 1001	1000 1100	
0001 0011	0000 1110	0110 1100	1010 0010	1101 0100	0111 0010	1010 1111	1111 1000	
1101 0100	0000 0100	1111 0011	1101 0101	1110 0101	1010 0010	1011 0111	0110 1001	
0010 0001	0000 0011	1100 1101	1100 0110	1010 1010	1100 0011	0001 0100	0100 1110	
1110 0011	1001 0010	0010 1110	1101 1001	1111 0010	0001 0001	0000 1001	1001 0111	
0011 1011	1101 1111	1100 0001	0100 0011	0111 1000	1110 1110	1111 0101	1000 0111	
1001 0011	0010 1111	0111 0101	1111 1001	0010 1001	1010 1010	1101 0010	0001 0011	
0111 1000	0101 1110	0111 1100	0000 1011	0010 1101	1111 1011	1000 1110	1011 1100	
0100 0111	1110 0001	0010 0111	0100 0110	1111 0111	0010 1010	0110 0100	1010 0110	
1000 0111	0000 0000	0010 0001	1101 1011	0001 0111	0010 1100	0110 1110	1110 0100	
1000 0011	0010 1011	1111 1011	0011 1001	1010 1111	0000 1001	1010 0011	1100 0101	
1111 0010	0010 1000	1110 1001	0101 1000	0101 1110	1001 0101	1000 0011	0100 1100	
1011 1100	0110 1101	0110 1111	1110 0110	1001 0101	0101 1101	0011 1000	1100 0001	
0010 0011	1110 0111	1010 0111	1101 1000	0100 0011	0100 0100	1001 0110	0010 1001	

END bindump

bits are read least significant bit first
single space is a 4 bit boundary
double space is a byte boundary

///////
HEADER

4 bits CM - Compression Method: only CM=8 is defined
0001 = 8

4 bits CINFO - Compression Info: CINFO <= 7
1110 = 7

5 bits FCHECK - used as part of (CMF * 256 + FLG) % 31 = 0
0111 1 = 30

1 bit FDICT - if set there is a dictionary
0 = 0;

2 bits FLEVEL - Compression level, lets compressors know it might need to be recompressed
10 = 1


Check sum test

(CMF * 256 + FLG) % 31 = 0
CMF = 0001 1110 = 120
FLG = 0111 1010 = 94

120 * 256 = 30720
+94 = 30814
%31 = 0

passes



///////
START BLOCKS

BLOCK HEADER

1 bit BFINAL - if set this is the last block
1 = 1

2 bits BTYPE - the compression type for the block
01 = 2 = dynamic

BLOCK TREES
header

5 bits + 257 HLIT - the number of literal/length codes
0 0110 = 12
+257 = 269

5 bits + 1 HDIST - the number of distance codes
1111 0 = 15
+1 = 16

4 bits + 4 HCLEN - the number of code length codes
001  1 = 12
+4 = 16

-----
Get code lengths to construct the code length tree

code length alphabet order { 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 }
read 3 bits HCLEN(16) times

000 = 0
101 = 5
0  01 = 4 
11 0 = 3
010 = 2
001 = 4
0 00 = 0
11  0 = 3
000 = 0
110 = 3
0  00 = 0
11 0 = 3
000 = 0
001 = 4
0 00 = 0
10  1 = 5


for the code length tree
alphabet | code lengths

0  | 3
1  | 0
2  | 5
3  | 4
4  | 3
5  | 3
6  | 3
7  | 4
8  | 2
9  | 0
10 | 0
11 | 0
12 | 0
13 | 0
14 | 0
15 | 0
16 | 0
17 | 5
18 | 4

Convert this into a tree

maxBits = 5

blCount[maxBits +1] each index the number of bits, and the value at that index is the number of codes with that length

blCount = {0, 0, 1, 4, 3, 2 }


init the array of nextCodes
nextCode[] = {0, 0, 0, 0, 0, 0}

each nextCode equals the code before it + number of codes for the one before it bit shifted up once

2 <= i <= maxBits
nextCode[i] = (nextCode[i-1] + blCount[i-1]) << 1

i=2 | (0 + 0) << 1 = 0
i=3 | (0 + 1) << 1 = 2
i=4 | (2 + 4) << 1 = 12
i=5 | (12+ 3) << 1 = 30


nextCode = {0, 0, 0, 2, 12, 30}

now get the codes for each symbol
for each symbol use the code length as an index for nextCode, after you take a code add one to it

0  | 3 | 2  | 010
2  | 5 | 30 | 11110
3  | 4 | 12 | 1100
4  | 3 | 3  | 011
5  | 3 | 4  | 100
6  | 3 | 5  | 101
7  | 4 | 13 | 1101
8  | 2 | 0  | 00
17 | 5 | 31 | 11111
18 | 4 | 14 | 1110

nextCode = {0, 0, 1, 6, 15, 32}

code length tree:

                                               #
                                              / \
                        ----------------------   ----------------------
                       /                                               \
                      #                                                 #
                     / \                                               / \ 
           ----------   ---------                            ----------   --------
          /                      \                          /                     \
         8                        #                        #                       #     
                                 / \                      / \                     / \
                              ---   ----               ---   ---               ---   ---
                             /          \             /         \             /         \
                            0            4           5           6           #           #
                                                                           /   \        /  \
                                                                          3     7     18    #
                                                                                           / \
                                                                                           2 17



0-15	| Represent code lengths of 0-15
16	| Copy the previous code length 3-6 times, next 2 bits + 3
17	| Repeat a code length of 0 for 3-10 times, next 3 bits + 3
18	| Repeat a code length of 0 for 11-138 times, next 7 bits + 11



----
Next decode the code lengths for the literal/length tree, it is the next HLIT codes

HLIT = 269

bits	| symbol	| extra bits	| results	| l\l tree length
111 0	| 18	 	| 101   0100	| 0 x 32	| 32
1100	| 3		|		| 3		| 33
1110	| 18		| 0000   000	| 0 x 11	| 44
0 0	| 8		|		| 8		| 45
010	| 0		|		| 0		| 46
1101	| 7		|		| 7		| 47
1110	| 18		| 1110   000	| 0 x 18	| 65
0   0	| 8		|		| 8		| 66
00	| 8		| 		| 8		| 67
1 1111	| 17		| 000		| 0 x 3	| 70
0 0	| 8		| 		| 8		| 71
010	| 0		|		| 0		| 72
010	| 0		|		| 0		| 73
0 0	| 8		|		| 8		| 74
111 11	| 17		| 111		| 0 x 10	| 84
00	| 8		|		| 8		| 85
1 110	| 18		| 1 0000 00	| 12		| 97
10 0	| 5		|		| 5		| 98
00	| 8		| 		| 8		| 99
1  01	| 6		|		| 6		| 100
10 0	| 5		|		| 5		| 101
011	| 4		|		| 4		| 102
101	| 6		|		| 6		| 103
1 01	| 6		|		| 6		| 104
10  0	| 5		| 		| 5		| 105
011	| 4		|		| 4		| 106
1101	| 7		|		| 7		| 107
1101	| 7		| 		| 7		| 108
100	| 5		|		| 5		| 109












